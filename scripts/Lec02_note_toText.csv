0,"""BRANCHING,  ITERATION (download slides and . pyfiles  follow along!) 6.0001 LECTURE 2 6.0001 LECTURE 2 1"""
1,"""LAST TIME syntax and semantics scalar objects simple operations expressions, variables and values 6.0001 LECTURE 2 2"""
2,"""TODAY string object type branching and conditionals indentation iteration and loops 6.0001 LECTURE 2 3"""
3,"""STRINGS letters, special characters, spaces, digits enclose in  quotation marks or single quotes hi = ""hello there""concatenate strings name = ""ana""greet = hi + namegreeting = hi + """"+ namedo some operations on a string as defined in Python docs silly = hi + """"+ name * 36.0001 LECTURE 2 4"""
4,"""INPUT/OUTPUT:  print used to  output stuff to console keyword is  printx = 1 print(x) x_str = str (x) print(""my  fav  num is"", x, ""."", ""x ="",  x)print(""my  fav  num is "" +  x_str + "". "" + ""x = "" +  x_str )6.0001 LECTURE 2 5"""
5,"""INPUT/OUTPUT:  input("""")prints whatever is in the quotes user types in something and hits enter binds that value to a variable text = input(""Type anything... "")print(5*text)inputgives you a string  so must cast if working  with numbers num= int(input(""Type a number... ""))print(5*num)6.0001 LECTURE 2 6"""
6,"""COMPARISON OPERATORS ON int,float, string iand jare variable names comparisons below evaluate to a Boolean  i> j i>= j i< j i<= j i== j equality test,  Trueif iis the same as  ji!= j inequality test,  Trueif inot the same as  j6.0001 LECTURE 2 7"""
7,"""LOGIC OPERATORS ON bools aand bare variable names (with Boolean values) not aTrueif ais FalseFalseif ais Truea and b Trueif both are  Truea or b Trueif either or both are  True6.0001 LECTURE 2 8ABA and BA or B True True True True True False False True False True False True False False False False"""
8,"""If right clear, go right  If right blocked, go forward If right and  front blocked, go left If right , front,  left blocked, go back 6.0001 LECTURE 2 10"""
9,"""CONTROL FLOW  -BRANCHING if <condition>: <expression> <expression> ...if <condition >:<expression> <expression >...else:<expression ><expression >...if <condition>: <expression> <expression> ...elif<condition>: <expression > <expression> ...else:<expression> <expression >...<condition> has a value  Trueor Falseevaluate expressions in that block if  <condition> is True6.0001 LECTURE 2 11"""
10,"""INDENTATION matters in Python how you denote blocks of code x =  float(input(""Enter a number for x: "")) y =  float(input(""Enter a number for y: "")) if x == y: print(""x and y are equal"") if y != 0: print(""therefore, x / y is"",  x/y) elif x < y: print(""x  is  smaller"") else: print(""y  is  smaller"") print(""thanks!"") print(""x  and y are  equal"") if y != 0: print(""therefore , x / y is"",  x/y) print(""x  is  smaller"") print(""y  is  smaller"") 6.0001 LECTURE 2 12"""
11,"""=vs  ==x = float(input(""Enter a number for x: ""))y = float(input(""Enter a number for y: ""))if x == y:print(""x and y are equal"")if y != 0:print(""therefore, x / y is"", x/y)elifx < y:print(""x is smaller"")else:print(""y is smaller"")print(""thanks!"")6.0001 LECTURE 2 13"""
12,"""Legend of Zelda  Lost Woods keep going right,  takes you back to this  same screen, stuck in  a loopif <exit right>: <set background to woods_background> if <exit right>: <set background to woods_background> if <exit right>: <set background to woods_background> and so on and on and on... else: <set background to exit_background> else: <set background to exit_background> else:<set background to exit_background> <set background to  woods_background >if <exit right>: else: <set background to  exit_background ><set background to  woods_background >if <exit right>: else :<set background to  exit_background ><set background to  woods_background >and so on and on and on... <set background to  exit_background >6.0001 LECTURE 2 14"""
13,"""while <exit right>: <set background to woods_background> <set background to exit_background> Legend of Zelda  Lost Woods keep going right,  takes you back to this  same screen, stuck in  a loop6.0001 LECTURE 2 15<set background to  woods_background >"""
14,"""CONTROL FLOW:  while LOOPS while <condition>: <expression> <expression> ...<condition>  evaluates to a Boolean if <condition>  is True, do all the steps inside the  while code block check  <condition> again repeat until  <condition>  is False6.0001 LECTURE 2 16"""
15,"""while LOOP EXAMPLE You are in the Lost  Forest. ************ ************ ************ ************ Go  left  or right ?PROGRAM: n = input (""You're in  the Lost  Forest. Go  left or right? "") while  n == ""right"": n = input(""You're  in the Lost  Forest. Go  left or right? "") print(""You  got out of the Lost Forest !"") 6.0001 LECTURE 2 17"""
16,"""CONTROL FLOW:  while  and  forLOOPS iterate through numbers in a sequence # more complicated with while loop n =  0while n < 5: print(n) n =  n+1# shortcut with for loop for n in  range(5 ):print(n) 6.0001 LECTURE 2 18"""
17,"""CONTROL FLOW:  forLOOPS for <variable> in range(< some_num >):<expression> <expression > ...each time through the loop,  <variable> takes a value first time,  <variable> starts at the smallest value next time,  <variable> gets the  prev value + 1 etc. 6.0001 LECTURE 2 19"""
18,"""range(start,stop,step)default values are  start = 0 and step = 1 and optional loop until value is  stop -1 mysum= 0for iin range(7, 10):mysum+= iprint(mysum)mysum= 0for iin range(5, 11, 2):mysum+= iprint(mysum)6.0001 LECTURE 2 20"""
19,"""break STATEMENT immediately exits whatever loop it is in skips remaining expressions in code block exits only innermost loop! while <condition_1>: while <condition_2>: <expression_a >break <expression_b ><expression_c >6.0001 LECTURE 2 21"""
20,"""forVS  while LOOPS forloops know number of  iterations can  end early  via break uses a  counter can rewrite a for loop  using a while loopwhileloops unbounded number of  iterations can  end early  via breakcan use a  counter but  must initialize  before loop  and increment it inside loop may not be able to  rewrite  a whileloop using  a forloop6.0001 LECTURE 2 23"""
